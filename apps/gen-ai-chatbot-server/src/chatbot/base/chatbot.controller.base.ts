/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ChatbotService } from "../chatbot.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ChatbotCreateInput } from "./ChatbotCreateInput";
import { Chatbot } from "./Chatbot";
import { ChatbotFindManyArgs } from "./ChatbotFindManyArgs";
import { ChatbotWhereUniqueInput } from "./ChatbotWhereUniqueInput";
import { ChatbotUpdateInput } from "./ChatbotUpdateInput";
import { InteractionFindManyArgs } from "../../interaction/base/InteractionFindManyArgs";
import { Interaction } from "../../interaction/base/Interaction";
import { InteractionWhereUniqueInput } from "../../interaction/base/InteractionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ChatbotControllerBase {
  constructor(
    protected readonly service: ChatbotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Chatbot })
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createChatbot(
    @common.Body() data: ChatbotCreateInput
  ): Promise<Chatbot> {
    return await this.service.createChatbot({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Chatbot] })
  @ApiNestedQuery(ChatbotFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chatbots(@common.Req() request: Request): Promise<Chatbot[]> {
    const args = plainToClass(ChatbotFindManyArgs, request.query);
    return this.service.chatbots({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Chatbot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chatbot(
    @common.Param() params: ChatbotWhereUniqueInput
  ): Promise<Chatbot | null> {
    const result = await this.service.chatbot({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Chatbot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateChatbot(
    @common.Param() params: ChatbotWhereUniqueInput,
    @common.Body() data: ChatbotUpdateInput
  ): Promise<Chatbot | null> {
    try {
      return await this.service.updateChatbot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Chatbot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteChatbot(
    @common.Param() params: ChatbotWhereUniqueInput
  ): Promise<Chatbot | null> {
    try {
      return await this.service.deleteChatbot({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/interactions")
  @ApiNestedQuery(InteractionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Interaction",
    action: "read",
    possession: "any",
  })
  async findInteractions(
    @common.Req() request: Request,
    @common.Param() params: ChatbotWhereUniqueInput
  ): Promise<Interaction[]> {
    const query = plainToClass(InteractionFindManyArgs, request.query);
    const results = await this.service.findInteractions(params.id, {
      ...query,
      select: {
        chatbot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/interactions")
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "update",
    possession: "any",
  })
  async connectInteractions(
    @common.Param() params: ChatbotWhereUniqueInput,
    @common.Body() body: InteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interactions: {
        connect: body,
      },
    };
    await this.service.updateChatbot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/interactions")
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "update",
    possession: "any",
  })
  async updateInteractions(
    @common.Param() params: ChatbotWhereUniqueInput,
    @common.Body() body: InteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interactions: {
        set: body,
      },
    };
    await this.service.updateChatbot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/interactions")
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "update",
    possession: "any",
  })
  async disconnectInteractions(
    @common.Param() params: ChatbotWhereUniqueInput,
    @common.Body() body: InteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interactions: {
        disconnect: body,
      },
    };
    await this.service.updateChatbot({
      where: params,
      data,
      select: { id: true },
    });
  }
}
