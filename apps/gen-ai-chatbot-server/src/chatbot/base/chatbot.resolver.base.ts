/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Chatbot } from "./Chatbot";
import { ChatbotCountArgs } from "./ChatbotCountArgs";
import { ChatbotFindManyArgs } from "./ChatbotFindManyArgs";
import { ChatbotFindUniqueArgs } from "./ChatbotFindUniqueArgs";
import { CreateChatbotArgs } from "./CreateChatbotArgs";
import { UpdateChatbotArgs } from "./UpdateChatbotArgs";
import { DeleteChatbotArgs } from "./DeleteChatbotArgs";
import { InteractionFindManyArgs } from "../../interaction/base/InteractionFindManyArgs";
import { Interaction } from "../../interaction/base/Interaction";
import { ChatbotService } from "../chatbot.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Chatbot)
export class ChatbotResolverBase {
  constructor(
    protected readonly service: ChatbotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "read",
    possession: "any",
  })
  async _chatbotsMeta(
    @graphql.Args() args: ChatbotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Chatbot])
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "read",
    possession: "any",
  })
  async chatbots(
    @graphql.Args() args: ChatbotFindManyArgs
  ): Promise<Chatbot[]> {
    return this.service.chatbots(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Chatbot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "read",
    possession: "own",
  })
  async chatbot(
    @graphql.Args() args: ChatbotFindUniqueArgs
  ): Promise<Chatbot | null> {
    const result = await this.service.chatbot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Chatbot)
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "create",
    possession: "any",
  })
  async createChatbot(
    @graphql.Args() args: CreateChatbotArgs
  ): Promise<Chatbot> {
    return await this.service.createChatbot({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Chatbot)
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "update",
    possession: "any",
  })
  async updateChatbot(
    @graphql.Args() args: UpdateChatbotArgs
  ): Promise<Chatbot | null> {
    try {
      return await this.service.updateChatbot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Chatbot)
  @nestAccessControl.UseRoles({
    resource: "Chatbot",
    action: "delete",
    possession: "any",
  })
  async deleteChatbot(
    @graphql.Args() args: DeleteChatbotArgs
  ): Promise<Chatbot | null> {
    try {
      return await this.service.deleteChatbot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Interaction], { name: "interactions" })
  @nestAccessControl.UseRoles({
    resource: "Interaction",
    action: "read",
    possession: "any",
  })
  async findInteractions(
    @graphql.Parent() parent: Chatbot,
    @graphql.Args() args: InteractionFindManyArgs
  ): Promise<Interaction[]> {
    const results = await this.service.findInteractions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
