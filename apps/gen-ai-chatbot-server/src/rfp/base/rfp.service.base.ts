/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Rfp as PrismaRfp,
  Response as PrismaResponse,
  User as PrismaUser,
} from "@prisma/client";

export class RfpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RfpCountArgs, "select">): Promise<number> {
    return this.prisma.rfp.count(args);
  }

  async rfps(args: Prisma.RfpFindManyArgs): Promise<PrismaRfp[]> {
    return this.prisma.rfp.findMany(args);
  }
  async rfp(args: Prisma.RfpFindUniqueArgs): Promise<PrismaRfp | null> {
    return this.prisma.rfp.findUnique(args);
  }
  async createRfp(args: Prisma.RfpCreateArgs): Promise<PrismaRfp> {
    return this.prisma.rfp.create(args);
  }
  async updateRfp(args: Prisma.RfpUpdateArgs): Promise<PrismaRfp> {
    return this.prisma.rfp.update(args);
  }
  async deleteRfp(args: Prisma.RfpDeleteArgs): Promise<PrismaRfp> {
    return this.prisma.rfp.delete(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.ResponseFindManyArgs
  ): Promise<PrismaResponse[]> {
    return this.prisma.rfp
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.rfp
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
