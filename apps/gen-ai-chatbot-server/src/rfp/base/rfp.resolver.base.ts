/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Rfp } from "./Rfp";
import { RfpCountArgs } from "./RfpCountArgs";
import { RfpFindManyArgs } from "./RfpFindManyArgs";
import { RfpFindUniqueArgs } from "./RfpFindUniqueArgs";
import { CreateRfpArgs } from "./CreateRfpArgs";
import { UpdateRfpArgs } from "./UpdateRfpArgs";
import { DeleteRfpArgs } from "./DeleteRfpArgs";
import { ResponseFindManyArgs } from "../../response/base/ResponseFindManyArgs";
import { Response } from "../../response/base/Response";
import { User } from "../../user/base/User";
import { RfpService } from "../rfp.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Rfp)
export class RfpResolverBase {
  constructor(
    protected readonly service: RfpService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rfp",
    action: "read",
    possession: "any",
  })
  async _rfpsMeta(
    @graphql.Args() args: RfpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rfp])
  @nestAccessControl.UseRoles({
    resource: "Rfp",
    action: "read",
    possession: "any",
  })
  async rfps(@graphql.Args() args: RfpFindManyArgs): Promise<Rfp[]> {
    return this.service.rfps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rfp, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rfp",
    action: "read",
    possession: "own",
  })
  async rfp(@graphql.Args() args: RfpFindUniqueArgs): Promise<Rfp | null> {
    const result = await this.service.rfp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rfp)
  @nestAccessControl.UseRoles({
    resource: "Rfp",
    action: "create",
    possession: "any",
  })
  async createRfp(@graphql.Args() args: CreateRfpArgs): Promise<Rfp> {
    return await this.service.createRfp({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rfp)
  @nestAccessControl.UseRoles({
    resource: "Rfp",
    action: "update",
    possession: "any",
  })
  async updateRfp(@graphql.Args() args: UpdateRfpArgs): Promise<Rfp | null> {
    try {
      return await this.service.updateRfp({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rfp)
  @nestAccessControl.UseRoles({
    resource: "Rfp",
    action: "delete",
    possession: "any",
  })
  async deleteRfp(@graphql.Args() args: DeleteRfpArgs): Promise<Rfp | null> {
    try {
      return await this.service.deleteRfp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Response], { name: "responses" })
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "read",
    possession: "any",
  })
  async findResponses(
    @graphql.Parent() parent: Rfp,
    @graphql.Args() args: ResponseFindManyArgs
  ): Promise<Response[]> {
    const results = await this.service.findResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Rfp): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
